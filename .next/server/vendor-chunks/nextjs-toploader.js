"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/nextjs-toploader";
exports.ids = ["vendor-chunks/nextjs-toploader"];
exports.modules = {

/***/ "(ssr)/./node_modules/nextjs-toploader/dist/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/nextjs-toploader/dist/index.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* __next_internal_client_entry_do_not_use__  cjs */ \nvar D = Object.create;\nvar y = Object.defineProperty;\nvar G = Object.getOwnPropertyDescriptor;\nvar Q = Object.getOwnPropertyNames;\nvar V = Object.getPrototypeOf, Y = Object.prototype.hasOwnProperty;\nvar i = (o, e)=>y(o, \"name\", {\n        value: e,\n        configurable: !0\n    });\nvar Z = (o, e)=>{\n    for(var p in e)y(o, p, {\n        get: e[p],\n        enumerable: !0\n    });\n}, C = (o, e, p, h)=>{\n    if (e && typeof e == \"object\" || typeof e == \"function\") for (let l of Q(e))!Y.call(o, l) && l !== p && y(o, l, {\n        get: ()=>e[l],\n        enumerable: !(h = G(e, l)) || h.enumerable\n    });\n    return o;\n};\nvar T = (o, e, p)=>(p = o != null ? D(V(o)) : {}, C(e || !o || !o.__esModule ? y(p, \"default\", {\n        value: o,\n        enumerable: !0\n    }) : p, o)), _ = (o)=>C(y({}, \"__esModule\", {\n        value: !0\n    }), o);\nvar re = {};\nZ(re, {\n    default: ()=>ee,\n    useTopLoader: ()=>O\n});\nmodule.exports = _(re);\nvar t = T(__webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\")), L = T(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\")), a = T(__webpack_require__(/*! nprogress */ \"(ssr)/./node_modules/nprogress/nprogress.js\"));\nvar s = T(__webpack_require__(/*! nprogress */ \"(ssr)/./node_modules/nprogress/nprogress.js\"));\nvar O = i(()=>({\n        start: ()=>s.start(),\n        done: (e)=>s.done(e),\n        remove: ()=>s.remove(),\n        setProgress: (e)=>s.set(e),\n        inc: (e)=>s.inc(e),\n        trickle: ()=>s.trickle(),\n        isStarted: ()=>s.isStarted(),\n        isRendered: ()=>s.isRendered(),\n        getPositioningCSS: ()=>s.getPositioningCSS()\n    }), \"useTopLoader\");\nvar z = i(({ color: o, height: e, showSpinner: p, crawl: h, crawlSpeed: l, initialPosition: v, easing: S, speed: k, shadow: N, template: E, zIndex: A = 1600, showAtBottom: H = !1, showForHashAnchor: K = !0 })=>{\n    let W = \"#29d\", u = o != null ? o : W, j = e != null ? e : 3, B = !N && N !== void 0 ? \"\" : N ? `box-shadow:${N}` : `box-shadow:0 0 10px ${u},0 0 5px ${u}`, F = L.createElement(\"style\", null, `#nprogress{pointer-events:none}#nprogress .bar{background:${u};position:fixed;z-index:${A};${H ? \"bottom: 0;\" : \"top: 0;\"}left:0;width:100%;height:${j}px}#nprogress .peg{display:block;position:absolute;right:0;width:100px;height:100%;${B};opacity:1;-webkit-transform:rotate(3deg) translate(0px,-4px);-ms-transform:rotate(3deg) translate(0px,-4px);transform:rotate(3deg) translate(0px,-4px)}#nprogress .spinner{display:block;position:fixed;z-index:${A};${H ? \"bottom: 15px;\" : \"top: 15px;\"}right:15px}#nprogress .spinner-icon{width:18px;height:18px;box-sizing:border-box;border:2px solid transparent;border-top-color:${u};border-left-color:${u};border-radius:50%;-webkit-animation:nprogress-spinner 400ms linear infinite;animation:nprogress-spinner 400ms linear infinite}.nprogress-custom-parent{overflow:hidden;position:relative}.nprogress-custom-parent #nprogress .bar,.nprogress-custom-parent #nprogress .spinner{position:absolute}@-webkit-keyframes nprogress-spinner{0%{-webkit-transform:rotate(0deg)}100%{-webkit-transform:rotate(360deg)}}@keyframes nprogress-spinner{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}`), f = i((m)=>new URL(m, window.location.href).href, \"toAbsoluteURL\"), q = i((m, b)=>{\n        let d = new URL(f(m)), P = new URL(f(b));\n        return d.href.split(\"#\")[0] === P.href.split(\"#\")[0];\n    }, \"isHashAnchor\"), I = i((m, b)=>{\n        let d = new URL(f(m)), P = new URL(f(b));\n        return d.hostname.replace(/^www\\./, \"\") === P.hostname.replace(/^www\\./, \"\");\n    }, \"isSameHostName\");\n    return L.useEffect(()=>{\n        a.configure({\n            showSpinner: p != null ? p : !0,\n            trickle: h != null ? h : !0,\n            trickleSpeed: l != null ? l : 200,\n            minimum: v != null ? v : .08,\n            easing: S != null ? S : \"ease\",\n            speed: k != null ? k : 200,\n            template: E != null ? E : '<div class=\"bar\" role=\"bar\"><div class=\"peg\"></div></div><div class=\"spinner\" role=\"spinner\"><div class=\"spinner-icon\"></div></div>'\n        });\n        function m(r, g) {\n            let n = new URL(r), c = new URL(g);\n            if (n.hostname === c.hostname && n.pathname === c.pathname && n.search === c.search) {\n                let w = n.hash, x = c.hash;\n                return w !== x && n.href.replace(w, \"\") === c.href.replace(x, \"\");\n            }\n            return !1;\n        }\n        i(m, \"isAnchorOfCurrentUrl\");\n        var b = document.querySelectorAll(\"html\");\n        let d = i(()=>b.forEach((r)=>r.classList.remove(\"nprogress-busy\")), \"removeNProgressClass\");\n        function P(r) {\n            for(; r && r.tagName.toLowerCase() !== \"a\";)r = r.parentElement;\n            return r;\n        }\n        i(P, \"findClosestAnchor\");\n        function R(r) {\n            try {\n                let g = r.target, n = P(g), c = n == null ? void 0 : n.href;\n                if (c) {\n                    let w = window.location.href, x = n.target !== \"\", J = [\n                        \"tel:\",\n                        \"mailto:\",\n                        \"sms:\",\n                        \"blob:\",\n                        \"download:\"\n                    ].some((X)=>c.startsWith(X));\n                    if (!I(window.location.href, n.href)) return;\n                    let M = m(w, c) || q(window.location.href, n.href);\n                    if (!K && M) return;\n                    c === w || x || J || M || r.ctrlKey || r.metaKey || r.shiftKey || r.altKey || !f(n.href).startsWith(\"http\") ? (a.start(), a.done(), d()) : a.start();\n                }\n            } catch (g) {\n                a.start(), a.done();\n            }\n        }\n        i(R, \"handleClick\"), ((r)=>{\n            let g = r.pushState;\n            r.pushState = (...n)=>(a.done(), d(), g.apply(r, n));\n        })(window.history), ((r)=>{\n            let g = r.replaceState;\n            r.replaceState = (...n)=>(a.done(), d(), g.apply(r, n));\n        })(window.history);\n        function U() {\n            a.done(), d();\n        }\n        i(U, \"handlePageHide\");\n        function $() {\n            a.done();\n        }\n        return i($, \"handleBackAndForth\"), window.addEventListener(\"popstate\", $), document.addEventListener(\"click\", R), window.addEventListener(\"pagehide\", U), ()=>{\n            document.removeEventListener(\"click\", R), window.removeEventListener(\"pagehide\", U), window.removeEventListener(\"popstate\", $);\n        };\n    }, []), F;\n}, \"NextTopLoader\"), ee = z;\nz.propTypes = {\n    color: t.string,\n    height: t.number,\n    showSpinner: t.bool,\n    crawl: t.bool,\n    crawlSpeed: t.number,\n    initialPosition: t.number,\n    easing: t.string,\n    speed: t.number,\n    template: t.string,\n    shadow: t.oneOfType([\n        t.string,\n        t.bool\n    ]),\n    zIndex: t.number,\n    showAtBottom: t.bool\n};\n0 && (0); /**\n *\n * NextTopLoader\n * @license MIT\n * @param {NextTopLoaderProps} props The properties to configure NextTopLoader\n * @returns {React.JSX.Element}\n *\n */  //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/nextjs-toploader/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nextjs-toploader/dist/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/nextjs-toploader/dist/index.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* __next_internal_client_entry_do_not_use__  cjs */ 
const { createProxy } = __webpack_require__(/*! next/dist/build/webpack/loaders/next-flight-loader/module-proxy */ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-loader/module-proxy.js");
module.exports = createProxy("C:\\Users\\Public\\Desktop\\websiteDashboard\\website dashboard\\node_modules\\nextjs-toploader\\dist\\index.js");
 /**
 *
 * NextTopLoader
 * @license MIT
 * @param {NextTopLoaderProps} props The properties to configure NextTopLoader
 * @returns {React.JSX.Element}
 *
 */  //# sourceMappingURL=index.js.map


/***/ })

};
;